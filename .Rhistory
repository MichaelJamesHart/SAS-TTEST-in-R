horizontal = TRUE,
ylim = c(min(sale_amount_0) - (0.2 * abs(min(sale_amount_0))),
max(sale_amount_0) + (0.2 * max(sale_amount_0))))
points(mean(sale_amount_0), 2, lwd = 2, pch = 5)
points(mean(sale_amount_1), 1, lwd = 2, pch = 5)
axis(2, 1:2, c("1", "0"))
### Confidence interval ###
p <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
l <- c(3, 4, 7, 11, 10, 14, 14, 16, 19, 20, 22)
main_1 <- "Mean of value_amount Difference (0 - 1) With "
main_2 <- "% Confidence Intervals"
plot(p, l, type = "n", main = paste(main_1, conf_level, main_2, sep = ""),
xlab = "Difference", ylab = "",
xlim = c(lower_ci_pooled - (0.2 * abs(upper_ci_pooled)),
upper_ci_pooled + (0.2 * abs(upper_ci_pooled))), yaxt = "n")
legend(upper_ci_pooled + (0.1 * abs(upper_ci_pooled)), 20,
legend= "mean", pch = 5)
### Satterthwaite CI.
segments(x0 = lower_ci_satt, y0 = 15, x1 = upper_ci_satt, y1 = 15,
col = "red4", lwd = 4)
### Vertical bars.
segments(x0 = lower_ci_satt, y0 = 14, x1 = lower_ci_satt, y1 = 16,
col = "red4", lwd = 4)
segments(x0 = upper_ci_satt, y0 = 14, x1 = upper_ci_satt, y1 = 16,
col = "red4", lwd = 4)
points((mean_0 - mean_1), 15, lwd = 2, pch = 5)
text((mean_0 - mean_1), 16, labels = "Satterthwaite")
### Pooled CI.
segments(x0 = lower_ci_pooled, y0 = 10, x1 = upper_ci_pooled, y1 = 10,
col = "red4", lwd = 4)
### Vertical bars.
segments(x0 = lower_ci_pooled, y0 = 9, x1 = lower_ci_pooled, y1 = 11,
col = "red4", lwd = 4)
segments(x0 = upper_ci_pooled, y0 = 9, x1 = upper_ci_pooled, y1 = 11,
col = "red4", lwd = 4)
points((mean_0 - mean_1), 10, lwd = 2, pch = 5)
text((mean_0 - mean_1), 11, labels = "Pooled")
segments(x0 = lower_ci_pooled, y0 = 10, x1 = upper_ci_pooled, y1 = 10,
col = "red4", lwd = 5)
### QQnorm
par(mfrow = c(1, 2))
qqnorm(sale_amount_0, ylim = c(-1000, 800000), xlab="Quantile",
ylab="value_amount", col = "blue3",
main = "Q-Q Plot of value_amount_0")
qqline(sale_amount_0, ylim = c(-1000, 800000), xlab="Quantile",
ylab="value_amount", col = "gray")
legend("topleft", legend= "0", bty = "n")
qqnorm(sale_amount_1, xlab="Quantile", ylab="value_amount",
col = "blue3", main = "Q-Q Plot of value_amount_1")
qqline(sale_amount_1, xlab="Quantile", ylab="value_amount", col = "gray")
legend("topleft", legend= "1", bty = "n")
}
}
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.1, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.1, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.05, plots = TRUE)
ichomes$bsmtY <- as.numeric(ichomes$bsmt %in% c("1/2", "3/4", "Full"))
ttest <- function(x = c(1:10), class = factor(x = rep(0:1, 5), levels = 0:1),
# Set the working directory to the folder containing the HomeSales.txt file.
setwd("G:/My Drive/GitHub Portfolio/SAS_TTEST_in_R")
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.01, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.01, plots = TRUE)
ttest <- function(x = c(1:10), class = factor(x = rep(0:1, 5), levels = 0:1),
alpha = 0.05, plots = FALSE) {
# Variables
conf_level <- (1 - alpha) * 100
freq_0 <- length(as.numeric(class)) - sum(as.numeric(class))
freq_1 <- sum(as.numeric(class))
percent_0 <- round((freq_0 / length(as.numeric(class))) * 100, digits = 2)
percent_1 <- round((freq_1 / length(as.numeric(class))) * 100, digits = 2)
cum_freq_0 <- freq_0
cum_freq_1 <- freq_0 + freq_1
cum_perc_0 <- percent_0
cum_perc_1 <- percent_0 + percent_1
# Sale amount
sale_amount <- x
sale_amount_0 <- x * (-(as.numeric(class) - 1))
sale_amount_0 <- sale_amount_0[which(sale_amount_0 != 0)]
sale_amount_1 <- x * as.numeric(class)
sale_amount_1 <- sale_amount_1[which(sale_amount_1 != 0)]
mean_0 <- mean(sale_amount_0)
mean_1 <- mean(sale_amount_1)
# Standard deviation
sd_0 <- round(sd(sale_amount_0), 1)
sd_1 <- round(sd(sale_amount_1), 1)
# Standard error
se_0 <- round(sd_0 / sqrt(freq_0), 1)
se_1 <- round(sd_1 / sqrt(freq_1), 1)
# Degrees of freedom
df <- freq_0 + freq_1 -2
satt_df <- round((sd_0^2/freq_0 + sd_1^2/freq_1)^2 /
((1/(freq_0-1) * (sd_0^2/freq_0)^2 + (1/(freq_1-1)) *
(sd_1^2/freq_1)^2)), 2)
f_value <- round(max(sd_0, sd_1)^2 / min(sd_0, sd_1)^2, 2)
mean_diff <- (mean_0 - mean_1)
# Standard Deviation and Standard Error of Diffs
sd_diff <- round(sqrt(((sd_0^2) * (freq_0 -1) + (sd_1^2) *(freq_1 -1 )) /
(df)), 1)
se_diff <- round(sqrt(((sd_0^2) * (freq_0 -1) + (sd_1^2) *(freq_1 -1)) /
(df) * (1/freq_0 + 1/freq_1)), 1)
# t-stats
t_stat <- round((mean_diff / se_diff), 2)
sat_t_stat <- round(mean_diff / sqrt((sd_0^2/freq_0) + (sd_1^2/freq_1)), 2)
conf_level <- (1 - alpha) * 100
conf_level_dec <- (1 - alpha)
t_crit <- NULL
if (conf_level == 90) {
t_crit <- 1.645
} else if (conf_level == 95) {
t_crit <- 1.96
} else if (conf_level == 98) {
t_crit <- 2.326
} else if (conf_level == 99) {
t_crit <- 2.576
}
# p-values
t_test_0 <- t.test(sale_amount_0, conf.level = conf_level_dec)
t_test_1 <- t.test(sale_amount_1, conf.level = conf_level_dec)
t_test_pooled <- t.test(sale_amount_0, sale_amount_1, var.equal = TRUE,
conf.level = conf_level_dec)
t_test_satt <- t.test(sale_amount_0, sale_amount_1,
conf.level = conf_level_dec)
f_test <- var.test(sale_amount_0, sale_amount_1, conf.level = conf_level_dec)
satt_mean <- as.numeric(t_test_satt$estimate[1] - t_test_satt$estimate[2])
p_val_pooled <- t_test_pooled$p.value
p_val_satt <- t_test_satt$p.value
p_val_f <- f_test$p.value
ci_0 <- t_test_0$conf.int
ci_1 <- t_test_1$conf.int
ci_pooled <- t_test_pooled$conf.int
ci_satt <- t_test_satt$conf.int
# Confidence intervals for 0 and 1
lower_ci_0 <- ci_0[1]
upper_ci_0 <- ci_0[2]
lower_ci_1 <- ci_1[1]
upper_ci_1 <- ci_1[2]
# Confidence intervals for pooled
lower_ci_pooled <- ci_pooled[1]
upper_ci_pooled <- ci_pooled[2]
# Confidence intervals for Satterhwaite
lower_ci_satt <- ci_satt[1]
upper_ci_satt <- ci_satt[2]
# Title
cat("\t-------------------\n",
"\tThe TTEST Procedure\n",
"\tVariable:  value_amount\n")
cat("--------------------------------------------------------------------\n")
#
ttest_frame_1 <- data.frame(
"class" = c(0, 1, "Diff (1-2)"),
"N" = c(freq_0, freq_1, ""),
"Mean" = c(mean_0, mean_1, mean_diff),
"Std Dev" = c(sd_0, sd_1, sd_diff),
"Std Err" = c(se_0, se_1, se_diff),
"Minimum" = c(min(sale_amount_0), min(sale_amount_1), ""),
"Maximum" = c(max(sale_amount_0), max(sale_amount_1), "")
)
print(ttest_frame_1, row.names = FALSE)
cat("--------------------------------------------------------------------\n")
#
ttest_frame_2 <- data.frame(
"class" = c(0, 1, "Diff (1-2)", "Diff (1-2)"),
"Method" = c("", "", "Pooled", "Satterthwaite"),
"Mean" = c(mean_0, mean_1, round(mean_diff, 1), round(satt_mean, 1)),
"CL Lower" = c(round(lower_ci_0), round(lower_ci_1, 0),
round(lower_ci_pooled, 1), round(lower_ci_satt, 1)),
"CL Upper" = c(round(upper_ci_0), round(upper_ci_1, 0),
round(upper_ci_pooled, 1), round(upper_ci_satt, 1))
)
print(ttest_frame_2, row.names = FALSE)
cat("--------------------------------------------------------------------\n")
#
ttest_frame_3 <- data.frame(
"Method" = c("Pooled", "Satterthwaite"),
"Variances" = c("Equal", "Unequal"),
"DF" = c(freq_0 + freq_1 -2, satt_df),
"t Value" = c(t_stat, sat_t_stat),
"Pr > |t|" = c(round(p_val_pooled, 23), round(p_val_satt, 24))
)
print(ttest_frame_3, row.names = FALSE)
cat("--------------------------------------------------------------------\n")
#
cat("\tEquality of Variances\n")
ttest_frame_4 <- data.frame(
"Method" = "Folded F",
"Num DF" = max(freq_0, freq_1) - 1,
"Den DF" = min(freq_0, freq_1) - 1,
"F Value" = f_value,
"Pr > F" = round(p_val_f, 4)
)
print(ttest_frame_4, row.names = FALSE)
cat("--------------------------------------------------------------------\n")
if (plots == TRUE) {
### Graphs ###
par(mfrow = c(3, 1))
### Histogram for value_amount_0
hist(sale_amount_0, breaks = 30, freq = FALSE, xlab="", ylab="Density",
main = "Distribution of value_amount_0",
xlim = c(min(sale_amount_0) - (0.2 * abs(min(sale_amount_0))),
max(sale_amount_0) + (0.2 * max(sale_amount_0))))
lines(density(sale_amount_0), col="orange2", lwd=2)
curve(dnorm(x, mean = mean_0, sd = sd_0), add=TRUE, col="blue")
legend("topright", legend=c("Kernel", "Normal"),
col=c("orange", "blue"), lty=1:1, cex=0.8)
legend("topleft", legend= "0", bty = "n")
### Histogram for value_amount_1
hist(sale_amount_1, breaks = 30, freq = FALSE, xlab="", ylab="Density",
main = "Distribution of value_amount_1",
xlim = c(min(sale_amount_0) - (0.2 * abs(min(sale_amount_0))),
max(sale_amount_0) + (0.2 * max(sale_amount_0))))
lines(density(sale_amount_1), col="orange", lwd=2)
curve(dnorm(x, mean = mean_1, sd = sd_1), add=TRUE, col="blue")
legend("topright", legend=c("Kernel", "Normal"),
col=c("orange", "blue"), lty=1:1, cex=0.8)
legend("topleft", legend= "1", bty = "n")
### Boxplot for value_amount_0
boxplot(sale_amount_1, sale_amount_0,
xlab="value_amount", ylab="class",
horizontal = TRUE,
ylim = c(min(sale_amount_0) - (0.2 * abs(min(sale_amount_0))),
max(sale_amount_0) + (0.2 * max(sale_amount_0))))
points(mean(sale_amount_0), 2, lwd = 2, pch = 5)
points(mean(sale_amount_1), 1, lwd = 2, pch = 5)
axis(2, 1:2, c("1", "0"))
### Confidence interval ###
p <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
l <- c(3, 4, 7, 11, 10, 14, 14, 16, 19, 20, 22)
main_1 <- "Mean of value_amount Difference (0 - 1) With "
main_2 <- "% Confidence Intervals"
plot(p, l, type = "n", main = paste(main_1, conf_level, main_2, sep = ""),
xlab = "Difference", ylab = "",
xlim = c(lower_ci_pooled - (0.2 * abs(upper_ci_pooled)),
upper_ci_pooled + (0.2 * abs(upper_ci_pooled))), yaxt = "n")
legend(upper_ci_pooled + (0.1 * abs(upper_ci_pooled)), 20,
legend= "mean", pch = 5)
### Satterthwaite CI.
segments(x0 = lower_ci_satt, y0 = 15, x1 = upper_ci_satt, y1 = 15,
col = "red4", lwd = 4)
### Vertical bars.
segments(x0 = lower_ci_satt, y0 = 14, x1 = lower_ci_satt, y1 = 16,
col = "red4", lwd = 4)
segments(x0 = upper_ci_satt, y0 = 14, x1 = upper_ci_satt, y1 = 16,
col = "red4", lwd = 4)
points((mean_0 - mean_1), 15, lwd = 2, pch = 5)
text((mean_0 - mean_1), 16, labels = "Satterthwaite")
### Pooled CI.
segments(x0 = lower_ci_pooled, y0 = 10, x1 = upper_ci_pooled, y1 = 10,
col = "red4", lwd = 4)
### Vertical bars.
segments(x0 = lower_ci_pooled, y0 = 9, x1 = lower_ci_pooled, y1 = 11,
col = "red4", lwd = 4)
segments(x0 = upper_ci_pooled, y0 = 9, x1 = upper_ci_pooled, y1 = 11,
col = "red4", lwd = 4)
points((mean_0 - mean_1), 10, lwd = 2, pch = 5)
text((mean_0 - mean_1), 11, labels = "Pooled")
segments(x0 = lower_ci_pooled, y0 = 10, x1 = upper_ci_pooled, y1 = 10,
col = "red4", lwd = 5)
### QQnorm
par(mfrow = c(1, 2))
qqnorm(sale_amount_0, ylim = c(-1000, 800000), xlab="Quantile",
ylab="value_amount", col = "blue3",
main = "Q-Q Plot of value_amount_0")
qqline(sale_amount_0, ylim = c(-1000, 800000), xlab="Quantile",
ylab="value_amount", col = "gray")
legend("topleft", legend= "0", bty = "n")
qqnorm(sale_amount_1, xlab="Quantile", ylab="value_amount",
col = "blue3", main = "Q-Q Plot of value_amount_1")
qqline(sale_amount_1, xlab="Quantile", ylab="value_amount", col = "gray")
legend("topleft", legend= "1", bty = "n")
}
}
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.01, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.1, plots = TRUE)
ichomes <- read.delim("HomeSales.txt")
ichomes$bsmtY <- as.numeric(ichomes$bsmt %in% c("1/2", "3/4", "Full"))
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.01, plots = FALSE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.1, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.05, plots = TRUE)
### SAS t-test Function in R ###
### Michael Hart ###
# Set the working directory to the folder containing the HomeSales.txt file.
setwd("G:/My Drive/GitHub Portfolio/SAS_TTEST_in_R")
ichomes <- read.delim("HomeSales.txt")
ichomes$bsmtY <- as.numeric(ichomes$bsmt %in% c("1/2", "3/4", "Full"))
# Function
ttest <- function(x = c(1:10), class = factor(x = rep(0:1, 5), levels = 0:1),
alpha = 0.05, plots = FALSE) {
# Variables
conf_level <- (1 - alpha) * 100
freq_0 <- length(as.numeric(class)) - sum(as.numeric(class))
freq_1 <- sum(as.numeric(class))
percent_0 <- round((freq_0 / length(as.numeric(class))) * 100, digits = 2)
percent_1 <- round((freq_1 / length(as.numeric(class))) * 100, digits = 2)
cum_freq_0 <- freq_0
cum_freq_1 <- freq_0 + freq_1
cum_perc_0 <- percent_0
cum_perc_1 <- percent_0 + percent_1
# Sale amount
sale_amount <- x
sale_amount_0 <- x * (-(as.numeric(class) - 1))
sale_amount_0 <- sale_amount_0[which(sale_amount_0 != 0)]
sale_amount_1 <- x * as.numeric(class)
sale_amount_1 <- sale_amount_1[which(sale_amount_1 != 0)]
mean_0 <- mean(sale_amount_0)
mean_1 <- mean(sale_amount_1)
# Standard deviation
sd_0 <- round(sd(sale_amount_0), 1)
sd_1 <- round(sd(sale_amount_1), 1)
# Standard error
se_0 <- round(sd_0 / sqrt(freq_0), 1)
se_1 <- round(sd_1 / sqrt(freq_1), 1)
# Degrees of freedom
df <- freq_0 + freq_1 -2
satt_df <- round((sd_0^2/freq_0 + sd_1^2/freq_1)^2 /
((1/(freq_0-1) * (sd_0^2/freq_0)^2 + (1/(freq_1-1)) *
(sd_1^2/freq_1)^2)), 2)
f_value <- round(max(sd_0, sd_1)^2 / min(sd_0, sd_1)^2, 2)
mean_diff <- (mean_0 - mean_1)
# Standard Deviation and Standard Error of Diffs
sd_diff <- round(sqrt(((sd_0^2) * (freq_0 -1) + (sd_1^2) *(freq_1 -1 )) /
(df)), 1)
se_diff <- round(sqrt(((sd_0^2) * (freq_0 -1) + (sd_1^2) *(freq_1 -1)) /
(df) * (1/freq_0 + 1/freq_1)), 1)
# t-stats
t_stat <- round((mean_diff / se_diff), 2)
sat_t_stat <- round(mean_diff / sqrt((sd_0^2/freq_0) + (sd_1^2/freq_1)), 2)
conf_level <- (1 - alpha) * 100
conf_level_dec <- (1 - alpha)
t_crit <- NULL
if (conf_level == 90) {
t_crit <- 1.645
} else if (conf_level == 95) {
t_crit <- 1.96
} else if (conf_level == 98) {
t_crit <- 2.326
} else if (conf_level == 99) {
t_crit <- 2.576
}
# p-values
t_test_0 <- t.test(sale_amount_0, conf.level = conf_level_dec)
t_test_1 <- t.test(sale_amount_1, conf.level = conf_level_dec)
t_test_pooled <- t.test(sale_amount_0, sale_amount_1, var.equal = TRUE,
conf.level = conf_level_dec)
t_test_satt <- t.test(sale_amount_0, sale_amount_1,
conf.level = conf_level_dec)
f_test <- var.test(sale_amount_0, sale_amount_1, conf.level = conf_level_dec)
satt_mean <- as.numeric(t_test_satt$estimate[1] - t_test_satt$estimate[2])
p_val_pooled <- t_test_pooled$p.value
p_val_satt <- t_test_satt$p.value
p_val_f <- f_test$p.value
ci_0 <- t_test_0$conf.int
ci_1 <- t_test_1$conf.int
ci_pooled <- t_test_pooled$conf.int
ci_satt <- t_test_satt$conf.int
# Confidence intervals for 0 and 1
lower_ci_0 <- ci_0[1]
upper_ci_0 <- ci_0[2]
lower_ci_1 <- ci_1[1]
upper_ci_1 <- ci_1[2]
# Confidence intervals for pooled
lower_ci_pooled <- ci_pooled[1]
upper_ci_pooled <- ci_pooled[2]
# Confidence intervals for Satterhwaite
lower_ci_satt <- ci_satt[1]
upper_ci_satt <- ci_satt[2]
# Title
cat("\t-------------------\n",
"\tThe TTEST Procedure\n",
"\tVariable:  value_amount\n")
cat("--------------------------------------------------------------------\n")
#
ttest_frame_1 <- data.frame(
"class" = c(0, 1, "Diff (1-2)"),
"N" = c(freq_0, freq_1, ""),
"Mean" = c(mean_0, mean_1, mean_diff),
"Std Dev" = c(sd_0, sd_1, sd_diff),
"Std Err" = c(se_0, se_1, se_diff),
"Minimum" = c(min(sale_amount_0), min(sale_amount_1), ""),
"Maximum" = c(max(sale_amount_0), max(sale_amount_1), "")
)
print(ttest_frame_1, row.names = FALSE)
cat("--------------------------------------------------------------------\n")
#
ttest_frame_2 <- data.frame(
"class" = c(0, 1, "Diff (1-2)", "Diff (1-2)"),
"Method" = c("", "", "Pooled", "Satterthwaite"),
"Mean" = c(mean_0, mean_1, round(mean_diff, 1), round(satt_mean, 1)),
"CL Lower" = c(round(lower_ci_0), round(lower_ci_1, 0),
round(lower_ci_pooled, 1), round(lower_ci_satt, 1)),
"CL Upper" = c(round(upper_ci_0), round(upper_ci_1, 0),
round(upper_ci_pooled, 1), round(upper_ci_satt, 1))
)
print(ttest_frame_2, row.names = FALSE)
cat("--------------------------------------------------------------------\n")
#
ttest_frame_3 <- data.frame(
"Method" = c("Pooled", "Satterthwaite"),
"Variances" = c("Equal", "Unequal"),
"DF" = c(freq_0 + freq_1 -2, satt_df),
"t Value" = c(t_stat, sat_t_stat),
"Pr > |t|" = c(round(p_val_pooled, 23), round(p_val_satt, 24))
)
print(ttest_frame_3, row.names = FALSE)
cat("--------------------------------------------------------------------\n")
#
cat("\tEquality of Variances\n")
ttest_frame_4 <- data.frame(
"Method" = "Folded F",
"Num DF" = max(freq_0, freq_1) - 1,
"Den DF" = min(freq_0, freq_1) - 1,
"F Value" = f_value,
"Pr > F" = round(p_val_f, 4)
)
print(ttest_frame_4, row.names = FALSE)
cat("--------------------------------------------------------------------\n")
if (plots == TRUE) {
### Graphs ###
par(mfrow = c(3, 1))
### Histogram for value_amount_0
hist(sale_amount_0, breaks = 30, freq = FALSE, xlab="", ylab="Density",
main = "Distribution of value_amount_0",
xlim = c(min(sale_amount_0) - (0.2 * abs(min(sale_amount_0))),
max(sale_amount_0) + (0.2 * max(sale_amount_0))))
lines(density(sale_amount_0), col="orange2", lwd=2)
curve(dnorm(x, mean = mean_0, sd = sd_0), add=TRUE, col="blue")
legend("topright", legend=c("Kernel", "Normal"),
col=c("orange", "blue"), lty=1:1, cex=0.8)
legend("topleft", legend= "0", bty = "n")
### Histogram for value_amount_1
hist(sale_amount_1, breaks = 30, freq = FALSE, xlab="", ylab="Density",
main = "Distribution of value_amount_1",
xlim = c(min(sale_amount_0) - (0.2 * abs(min(sale_amount_0))),
max(sale_amount_0) + (0.2 * max(sale_amount_0))))
lines(density(sale_amount_1), col="orange", lwd=2)
curve(dnorm(x, mean = mean_1, sd = sd_1), add=TRUE, col="blue")
legend("topright", legend=c("Kernel", "Normal"),
col=c("orange", "blue"), lty=1:1, cex=0.8)
legend("topleft", legend= "1", bty = "n")
### Boxplot for value_amount_0
boxplot(sale_amount_1, sale_amount_0,
xlab="value_amount", ylab="class",
horizontal = TRUE,
ylim = c(min(sale_amount_0) - (0.2 * abs(min(sale_amount_0))),
max(sale_amount_0) + (0.2 * max(sale_amount_0))))
points(mean(sale_amount_0), 2, lwd = 2, pch = 5)
points(mean(sale_amount_1), 1, lwd = 2, pch = 5)
axis(2, 1:2, c("1", "0"))
### Confidence interval ###
p <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
l <- c(3, 4, 7, 11, 10, 14, 14, 16, 19, 20, 22)
main_1 <- "Mean of value_amount Difference (0 - 1) With "
main_2 <- "% Confidence Intervals"
plot(p, l, type = "n", main = paste(main_1, conf_level, main_2, sep = ""),
xlab = "Difference", ylab = "",
xlim = c(lower_ci_pooled - (0.2 * abs(upper_ci_pooled)),
upper_ci_pooled + (0.2 * abs(upper_ci_pooled))), yaxt = "n")
legend(upper_ci_pooled + (0.1 * abs(upper_ci_pooled)), 20,
legend= "mean", pch = 5)
### Satterthwaite CI.
segments(x0 = lower_ci_satt, y0 = 15, x1 = upper_ci_satt, y1 = 15,
col = "red4", lwd = 4)
### Vertical bars.
segments(x0 = lower_ci_satt, y0 = 14, x1 = lower_ci_satt, y1 = 16,
col = "red4", lwd = 4)
segments(x0 = upper_ci_satt, y0 = 14, x1 = upper_ci_satt, y1 = 16,
col = "red4", lwd = 4)
points((mean_0 - mean_1), 15, lwd = 2, pch = 5)
text((mean_0 - mean_1), 16, labels = "Satterthwaite")
### Pooled CI.
segments(x0 = lower_ci_pooled, y0 = 10, x1 = upper_ci_pooled, y1 = 10,
col = "red4", lwd = 4)
### Vertical bars.
segments(x0 = lower_ci_pooled, y0 = 9, x1 = lower_ci_pooled, y1 = 11,
col = "red4", lwd = 4)
segments(x0 = upper_ci_pooled, y0 = 9, x1 = upper_ci_pooled, y1 = 11,
col = "red4", lwd = 4)
points((mean_0 - mean_1), 10, lwd = 2, pch = 5)
text((mean_0 - mean_1), 11, labels = "Pooled")
segments(x0 = lower_ci_pooled, y0 = 10, x1 = upper_ci_pooled, y1 = 10,
col = "red4", lwd = 5)
### QQnorm
par(mfrow = c(1, 2))
qqnorm(sale_amount_0, ylim = c(-1000, 800000), xlab="Quantile",
ylab="value_amount", col = "blue3",
main = "Q-Q Plot of value_amount_0")
qqline(sale_amount_0, ylim = c(-1000, 800000), xlab="Quantile",
ylab="value_amount", col = "gray")
legend("topleft", legend= "0", bty = "n")
qqnorm(sale_amount_1, xlab="Quantile", ylab="value_amount",
col = "blue3", main = "Q-Q Plot of value_amount_1")
qqline(sale_amount_1, xlab="Quantile", ylab="value_amount", col = "gray")
legend("topleft", legend= "1", bty = "n")
}
}
### Uncomment each line and run them one by one for testing. ###
#ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.1, plots = TRUE)
#ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.05, plots = TRUE)
#ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.02, plots = TRUE)
#ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.01, plots = TRUE)
#ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.1, plots = FALSE)
#ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.05, plots = FALSE)
#ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.02, plots = FALSE)
#ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.01, plots = FALSE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.1, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.05, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.05, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.02, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.01, plots = TRUE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.1, plots = FALSE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.05, plots = FALSE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.02, plots = FALSE)
ttest(ichomes$sale.amount, ichomes$bsmtY, alpha = 0.01, plots = FALSE)
